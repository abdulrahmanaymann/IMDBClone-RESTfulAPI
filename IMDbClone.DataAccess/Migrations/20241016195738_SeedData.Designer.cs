// <auto-generated />
using System;
using IMDbClone.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMDbClone.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241016195738_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMDbClone.Core.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cast = "Leonardo DiCaprio, Joseph Gordon-Levitt, Ellen Page",
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 577, DateTimeKind.Utc).AddTicks(9969),
                            Director = "Christopher Nolan",
                            Duration = 148,
                            Genre = 1,
                            Language = "English",
                            PosterUrl = "http://example.com/inception.jpg",
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.",
                            Title = "Inception",
                            TrailerUrl = "http://example.com/inception_trailer.mp4"
                        },
                        new
                        {
                            Id = 2,
                            Cast = "Keanu Reeves, Laurence Fishburne, Carrie-Anne Moss",
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 577, DateTimeKind.Utc).AddTicks(9979),
                            Director = "The Wachowskis",
                            Duration = 136,
                            Genre = 18,
                            Language = "English",
                            PosterUrl = "http://example.com/the_matrix.jpg",
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
                            Title = "The Matrix",
                            TrailerUrl = "http://example.com/the_matrix_trailer.mp4"
                        });
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(11),
                            MovieId = 1,
                            Score = 9m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(17),
                            MovieId = 1,
                            Score = 8m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(20),
                            MovieId = 2,
                            Score = 10m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Amazing movie!",
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(48),
                            MovieId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Really good!",
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(53),
                            MovieId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "A groundbreaking film.",
                            CreatedAt = new DateTime(2024, 10, 16, 19, 57, 37, 578, DateTimeKind.Utc).AddTicks(54),
                            MovieId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "password1",
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Password = "password2",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.Rating", b =>
                {
                    b.HasOne("IMDbClone.Core.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDbClone.Core.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.Review", b =>
                {
                    b.HasOne("IMDbClone.Core.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDbClone.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.Movie", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("IMDbClone.Core.Entities.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
